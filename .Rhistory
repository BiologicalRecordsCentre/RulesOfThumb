library('tidyr')
library('ggplot2')
library('dplyr')
library('rmarkdown')
## The sparta library is found on github.  To install, run devtools::install_github('BiologicalRecordsCentre/sparta') You may need to manually install the package dependencies: 'lhs', 'gplots', 'rlang' and 'Rcpp', and the package JAGS (mcmc-jags) from sourceforge.
library('sparta')
files_are_here <-
"W:/PYWELL_SHARED/Pywell Projects/BRC/Charlie/1.c. New Model Rerun/4. Outputs/CIRRUS"
rdata_files <- list.files(files_are_here,
pattern = '.rdata$',
recursive = TRUE,
full.names = TRUE)
# The files we want are those in the 20000_update folder
rdata_files <- rdata_files[grepl('20000_update', rdata_files)]
num_files <- length(rdata_files)
speciesName <- quant25 <- Spnsite <- Spnvisits <- nyears <-
PropYrConverged <- Totalnvisits <- Totalnsites <- FirstYrConverged <-
LastYrConverged <- c(rep('',num_files*2))
plot_species <- function(new_data, x, species, main = ''){
new_data <- as.data.frame(new_data)
new_data[,'year'] <-
(Year = (x$min_year - 1) +
as.numeric(gsub("psi.fs", "",gsub("\\[|\\]","",row.names(new_data)))))
# rename columns, otherwise ggplot doesn't work properly
names(new_data) <- gsub("2.5%","quant_025", names(new_data))
names(new_data) <- gsub("97.5%","quant_975", names(new_data))
# Add rhat T/F column
new_data$rhat_threshold[new_data$Rhat < 1.1] <- 'Good (<1.1)'
new_data$rhat_threshold[new_data$Rhat > 1.1] <- 'Bad (>1.1)'
# plot the yearly predicted proportion of occupied sites
# plot with error bars based on 95CI
ggplot(new_data, aes_string(x = "year", y = "mean")) +
theme_bw() +
geom_ribbon(data = new_data,
aes_string(group = 1, ymin = "quant_025", ymax = "quant_975"),
alpha = 0.2) +
geom_line(size = 1, col = "black") +
geom_point(size = 4, aes(col = rhat_threshold)) +
scale_color_manual(name = 'Rhat',
values = c('Bad (>1.1)' = 'red','Good (<1.1)' = 'blue')) +
ylab("Occupancy") +
xlab("Year") +
scale_y_continuous(limits = c(0, 1)) +
ggtitle(main) +
theme(plot.title = element_text(lineheight = .8, face = "bold"),
legend.position = 'bottom')
ggsave(filename = paste0('metrics/plots/', species, '.png'),
width = 6.71, height = 4.64)
}
for(i in 1:num_files){
# Load the file
load(rdata_files[i])
# Load the summary table
bugsSummary <- out$BUGSoutput$summary
## ~~~ Useful information ~~~
speciesName[i] <- out$SPP_NAME
## ~~~ Explanatory variables ~~~
# Number of sites species is observed at
Spnsite[i] <- out$species_sites
# Number of visits on which the species is observed
Spnvisits[i] <- out$species_observations
# Number of years
nyears[i] <- length(out$max_year:out$min_year)
# Total visits
Totalnvisits[i] <- out$nvisits
# Total sites
Totalnsites[i] <- out$nsites
## Rhats ##
yearValues <- bugsSummary[grepl('^psi.fs\\[', rownames(bugsSummary)), ]
# Proportion of years converged
PropYrConverged[i] <- sum(yearValues[, 'Rhat'] < 1.1) / nrow(yearValues)
# First/Last year converged?
FirstYrConverged[i] <- yearValues[, 'Rhat'][1] < 1.1
LastYrConverged[i] <- tail(yearValues[, 'Rhat'], 1) < 1.1
plot_species(yearValues, out, speciesName[i])
rm(list = c('out'))
cat(paste0('First pass - Finished processing file ',i,' of ',num_files, '\n'))
}
# Load the file
load(rdata_files[i])
rdata_files[i]
library('tidyr')
library('ggplot2')
library('dplyr')
library('rmarkdown')
## The sparta library is found on github.  To install, run devtools::install_github('BiologicalRecordsCentre/sparta') You may need to manually install the package dependencies: 'lhs', 'gplots', 'rlang' and 'Rcpp', and the package JAGS (mcmc-jags) from sourceforge.
library('sparta')
devtools::install_github('BiologicalRecordsCentre/sparta')
devtools::install_github('BiologicalRecordsCentre/sparta')
library(rjags)
library(rjags)
devtools::install_github('BiologicalRecordsCentre/sparta')
# Lets look at the results of the consultation with model experts
fsdf <- read.csv(file = 'Results/Consultation/fsdf_full.csv')
fsdf
dim(fsdf)
dim(trendsdata)
dim(trendsData)
RM <- read.csv('Results/metrics/ALL_rawMetrics.csv')
LM <- read.csv('Results/metrics/ALL_posteriorLM.csv')
MM <- read.csv('Results/metrics/model_data.csv')
# Remove repeat variables from model data
MM <- MM[,c('speciesName','FirstYrConverged',
'LastYrConverged','PropYrConverged')]
# These merges drop a LOT of species that don't match. That is OK as the ones that don't
# match do not meet the data minimum criteria or we do not have model data for them, so
# cannot use them for predictions.
trendsData <- merge(x = LM, y = RM,
by.x = 'species',
by.y = 'species')
trendsData <- merge(x = MM, y = trendsData,
by.x= 'speciesName', by.y = 'species')
head(trendsData)
str(trendsData)
dim(trendsData)
head(fsdf)
fsdf$score
fsdf$score==3
sum(fsdf$score==3)
sum(fsdf$score==0)
(46+34)/100
ggplot() +
geom_point(data=trendsData[trendsData$mean_year_precision>6&
trendsData$mean_year_precision<1000000,],
aes(x=PropYrConverged,
y=mean_year_precision),
color='#DFDFDF',
size=.5) +
geom_point(data=fsdf,
aes(x=PropYrConverged,
y=mean_year_precision,
color=as.factor(score))) +
scale_x_continuous(limits=c(0,1),labels=scales::comma) +
scale_y_log10(limits=c(6,1000000),labels = scales::comma) +
theme_light() +
scale_color_manual(values=c('#000033','#0000ff',"#9999ff", "#ccccff"),
name='Model score') +
labs(title='What determines a "bad" model?') +
xlab("Proportion of Years which Converged") + ylab("Mean Year Precision")
library(rpart)
fsdf$good <- rep('bad',nrow(fsdf))
fsdf$good[fsdf$score>=2] <- 'good'
fit_fsdf <- rpart(good ~ mean_year_precision + precision_growth_rate,
method = 'class',
data = fsdf)
fit_fsdf
plot(fit_fsdf, uniform=TRUE,
main = "Which models are good or bad (precision only)?",
margin = .1)
text(fit_fsdf, use.n = TRUE,
all = TRUE,
cex = .7)
plot(fit_fsdf, uniform=TRUE,
main = "Which models are good or bad (precision only)?",
margin = .1)
text(fit_fsdf, use.n = TRUE,
all = TRUE,
cex = .7)
fit_fsdf <- rpart(good ~ mean_year_precision + precision_growth_rate + PropYrConverged,
method = 'class',
data = fsdf)
library('rpart.plot')
install.packages("rpart.plot")
rpart.plot(fit_fsdf)
?rpart.plot
??rpart.plot
library('rpart.plot')
rpart.plot(fit_fsdf)
rpart.plot(fit_fsdf)
fit_fsdf <- rpart(good ~ mean_year_precision + precision_growth_rate,
method = 'class',
data = fsdf)
rpart.plot(fit_fsdf)
rpart.plot(fit_fsdf, type = 0)
fit_fsdf <- rpart(good ~ mean_year_precision + precision_growth_rate + PropYrConverged,
method = 'class',
data = fsdf)
rpart.plot(fit_fsdf, type = 0)
rpart.plot(fit_fsdf, type = 3)
rpart.plot(fit_fsdf, type = 3, under =T)
rpart.plot(fit_fsdf, type = 3, under = T)
rpart.plot(fit_fsdf, type = 1, under = T)
rpart.plot(fit_fsdf, type = 4, under = T)
rpart.plot(fit_fsdf, type = 5, under = T)
rpart.plot(fit_fsdf, type = 4, under = T)
rpart.plot(fit_fsdf, type = 4, under = T, branch = 0.3)
rpart.plot(fit_fsdf, type = 4, under = T, branch = 0.7)
rpart.plot(fit_fsdf, type = 4, under = T, branch = 0.9)
rpart.plot(fit_fsdf, type = 4, under = T)
fit_fsdf <- rpart(good ~ mean_year_precision + precision_growth_rate,
method = 'class',
data = fsdf)
rpart.plot(fit_fsdf)
prp(fit_fsdf)
prp(mytree, type = 4, extra = 101, leaf.round = 0, fallen.leaves = TRUE,
varlen = 0, tweak = 1.2)
prp(fit_fsdf, type = 4, extra = 101, leaf.round = 0, fallen.leaves = TRUE,
varlen = 0, tweak = 1.2)
rpart.plot(fit_fsdf)
rpart.plot(fit_fsdf, extra = 101)
rpart.plot(fit_fsdf, extra = 101, type = 4)
